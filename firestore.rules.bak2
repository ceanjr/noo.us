rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para a coleÃ§Ã£o de usuÃ¡rios
    match /users/{userId} {
      // Permitir criar conta (tanto autenticado quanto nÃ£o autenticado para suportar cadastro)
      allow create: if (request.auth != null && request.auth.uid == userId)
                    || request.auth == null;

      // Permitir ler o prÃ³prio perfil
      allow read: if request.auth != null && request.auth.uid == userId;

      // Permitir ler perfil do parceiro vinculado
      allow read: if request.auth != null
                  && resource.data.partnerId == request.auth.uid;

      // Permitir buscar usuÃ¡rios por email ou telefone (necessÃ¡rio para login e convites)
      // Permitir leitura pÃºblica para suportar login
      allow read: if true;

      // Permitir atualizar o prÃ³prio perfil
      allow update: if request.auth != null && request.auth.uid == userId;

      // Permitir atualizar perfil de outro usuÃ¡rio APENAS para vinculaÃ§Ã£o
      // quando estÃ¡ definindo partnerId para si mesmo (aceitar convite)
      allow update: if request.auth != null
                    && request.resource.data.partnerId == request.auth.uid
                    && request.resource.data.partnerName is string
                    && request.resource.data.relationshipStart is string;

      // Permitir desvincular perfil do parceiro quando o documento do parceiro
      // atualmente aponta para o usuÃ¡rio autenticado
      allow update: if request.auth != null
                    && resource.data.partnerId == request.auth.uid
                    && request.resource.data.partnerId == null
                    && request.resource.data.partnerName == null;

      // Permitir deletar apenas se autenticado e for admin ou o prÃ³prio usuÃ¡rio
      allow delete: if request.auth != null && request.auth.uid == userId;

      // SubcoleÃ§Ã£o de vÃ­nculos (suporta mÃºltiplos vÃ­nculos por usuÃ¡rio)
      match /links/{linkId} {
        // Ler links do prÃ³prio usuÃ¡rio ou links que referenciem o usuÃ¡rio autenticado
        allow read: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);

        // Criar link no prÃ³prio doc OU criar espelho no doc do parceiro
        allow create: if request.auth != null && (
                        request.auth.uid == userId ||
                        request.resource.data.partnerId == request.auth.uid
                      );

        // Atualizar links pelo dono do documento OU pelo parceiro referenciado
        allow update: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);

        // Permitir deletar o link tanto pelo dono do doc quanto pelo parceiro referido
        allow delete: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);
      }
    }
    
    // Regras para a coleÃ§Ã£o de surpresas
    match /surprises/{surpriseId} {
      // Permitir criar surpresa se estiver autenticado e for o remetente
      allow create: if request.auth != null
                    && request.resource.data.senderId == request.auth.uid
                    && request.resource.data.senderName is string
                    && request.resource.data.recipientId is string
                    && request.resource.data.recipientName is string
                    && request.resource.data.type is string
                    && request.resource.data.content is string
                    && request.resource.data.title is string;

      // Permitir ler surpresas recebidas
      allow read: if request.auth != null
                  && resource.data.recipientId == request.auth.uid;

      // Permitir ler surpresas enviadas
      allow read: if request.auth != null
                  && resource.data.senderId == request.auth.uid;

      // Permitir deletar apenas se for o destinatÃ¡rio
      allow delete: if request.auth != null
                    && resource.data.recipientId == request.auth.uid;

      // Permitir atualizar (marcar como vista, por exemplo) se for o destinatÃ¡rio
      allow update: if request.auth != null
                    && resource.data.recipientId == request.auth.uid;
    }

    // Regras para a coleÃ§Ã£o de notificaÃ§Ãµes/convites
    match /notifications/{notificationId} {
      // Permitir criar notificaÃ§Ã£o se estiver autenticado
      allow create: if request.auth != null
                    && request.resource.data.senderId == request.auth.uid;

      // Permitir ler notificaÃ§Ãµes recebidas OU enviadas
      allow read: if request.auth != null
                  && (resource.data.recipientId == request.auth.uid
                      || resource.data.senderId == request.auth.uid);

      // Permitir atualizar notificaÃ§Ãµes (aceitar, rejeitar, etc.)
      allow update: if request.auth != null
                    && (resource.data.recipientId == request.auth.uid
                        || resource.data.senderId == request.auth.uid);

      // Permitir deletar prÃ³prias notificaÃ§Ãµes
      allow delete: if request.auth != null
                    && (resource.data.recipientId == request.auth.uid
                        || resource.data.senderId == request.auth.uid);
    }

    // Regras para conflitos de data
    match /dateConflicts/{conflictId} {
      // Permitir criar conflito
      allow create: if request.auth != null;

      // Permitir ler conflitos relacionados ao usuÃ¡rio
      allow read: if request.auth != null
                  && (resource.data.user1Id == request.auth.uid
                      || resource.data.user2Id == request.auth.uid);

      // Permitir atualizar conflitos relacionados ao usuÃ¡rio
      allow update: if request.auth != null
                    && (resource.data.user1Id == request.auth.uid
                        || resource.data.user2Id == request.auth.uid);

      // Permitir deletar conflitos resolvidos
      allow delete: if request.auth != null
                    && (resource.data.user1Id == request.auth.uid
                        || resource.data.user2Id == request.auth.uid);
    }

    // ===== CHALLENGES (Desafios do Dia) =====
    match /challenges/{challengeId} {
      allow read, write: if request.auth != null;
    }

    // ===== EVENTS (PrÃ³ximos Eventos) =====
    match /events/{eventId} {
      allow read, write: if request.auth != null;
    }

    // ===== MOODS (Humor do Dia) =====
    match /moods/{moodId} {
      allow read, write: if request.auth != null;
    }

    // ===== LAYOUT (ConfiguraÃ§Ã£o da Home) =====
    match /layout/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    
  }
}

