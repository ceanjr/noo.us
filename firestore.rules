rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para a coleção de usuários
    match /users/{userId} {
      // Permitir criar conta apenas se autenticado com o mesmo UID
      // Criação inicial feita via Firebase Auth
      allow create: if request.auth != null && request.auth.uid == userId;

      // Permitir ler o próprio perfil
      allow read: if request.auth != null && request.auth.uid == userId;

      // Permitir ler perfil do parceiro nos links
      allow read: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)/links/$(userId));
      
      // Permitir ler perfil de quem te vinculou (para aceitar convites)
      allow read: if request.auth != null && exists(/databases/$(database)/documents/users/$(userId)/links/$(request.auth.uid));

      // Permitir atualizar o próprio perfil
      allow update: if request.auth != null && request.auth.uid == userId;

      // Permitir deletar apenas se autenticado e for admin ou o próprio usuário
      allow delete: if request.auth != null && request.auth.uid == userId;

      // Subcoleção de vínculos (suporta múltiplos vínculos por usuário)
      match /links/{linkId} {
        // Ler links do próprio usuário ou links que referenciem o usuário autenticado
        allow read: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);

        // Criar link no próprio doc OU criar espelho no doc do parceiro
        allow create: if request.auth != null && (
                        request.auth.uid == userId ||
                        request.resource.data.partnerId == request.auth.uid
                      );

        // Atualizar links pelo dono do documento OU pelo parceiro referenciado
        allow update: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);

        // Permitir deletar o link tanto pelo dono do doc quanto pelo parceiro referido
        allow delete: if request.auth != null && (request.auth.uid == userId || resource.data.partnerId == request.auth.uid);
      }
    }
    
    // Regras para a coleção de surpresas
    match /surprises/{surpriseId} {
      // Permitir criar surpresa se estiver autenticado e for o remetente
      allow create: if request.auth != null
                    && request.resource.data.senderId == request.auth.uid
                    && request.resource.data.senderName is string
                    && request.resource.data.recipientId is string
                    && request.resource.data.recipientName is string
                    && request.resource.data.type is string
                    && request.resource.data.content is string
                    && request.resource.data.title is string;

      // Permitir ler surpresas recebidas
      allow read: if request.auth != null
                  && resource.data.recipientId == request.auth.uid;

      // Permitir ler surpresas enviadas
      allow read: if request.auth != null
                  && resource.data.senderId == request.auth.uid;

      // Permitir deletar apenas se for o destinatário
      allow delete: if request.auth != null
                    && resource.data.recipientId == request.auth.uid;

      // Permitir atualizar (marcar como vista, por exemplo) se for o destinatário
      allow update: if request.auth != null
                    && resource.data.recipientId == request.auth.uid;
    }

    // Regras para a coleção de notificações/convites
    match /notifications/{notificationId} {
      // Permitir criar notificação se estiver autenticado
      allow create: if request.auth != null
                    && request.resource.data.senderId == request.auth.uid;

      // Permitir ler notificações recebidas OU enviadas
      allow read: if request.auth != null
                  && (resource.data.recipientId == request.auth.uid
                      || resource.data.senderId == request.auth.uid);

      // Permitir atualizar notificações (aceitar, rejeitar, etc.)
      allow update: if request.auth != null
                    && (resource.data.recipientId == request.auth.uid
                        || resource.data.senderId == request.auth.uid);

      // Permitir deletar próprias notificações
      allow delete: if request.auth != null
                    && (resource.data.recipientId == request.auth.uid
                        || resource.data.senderId == request.auth.uid);
    }


    // ===== CHALLENGES (Desafios do Dia) =====
    match /challenges/{challengeId} {
      allow read, write: if request.auth != null;
    }

    // ===== EVENTS (Próximos Eventos) =====
    match /events/{eventId} {
      allow read, write: if request.auth != null;
    }

    // ===== MOODS (Humor do Dia) =====
    match /moods/{moodId} {
      allow read, write: if request.auth != null;
    }

    // ===== LAYOUT (Configuração da Home) =====
    match /layout/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ===== RATE LIMITS (Controle de Taxa) =====
    match /rateLimits/{limitId} {
      // Apenas Cloud Functions podem escrever
      allow read: if request.auth != null && limitId.matches('^' + request.auth.uid + '_.*');
      allow write: if false; // Apenas via Cloud Functions
    }

    
  }
}

